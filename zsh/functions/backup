#!/bin/zsh

function _backup_usage {
  echo	""
  echo	"backup [OPTIONS]"
  echo	""
  echo	"Description"
  echo	""
  echo	"  -s, --source   The source directory to backup"
  echo	"  -t, --target   The target directory where to put the encrypted backup"
  echo	"  -h, --help     Prints this help text"
  echo	"  --dry-run      prints the backup command wihtout executing it"
  echo	""
  echo	"Examples"
  echo	""
  echo	"	backup --source /Users/batman/cave --target file:///Users/batman/dropbox/cave"
  echo	""
  echo	""
  echo	"Your can then restore your files like:"
  echo	""
  echo	"	duplicity restore --use-agent file:///Users/batman/dropbox/cave/ /temp/cave/"
}

zparseopts -D -E s:=source -source:=source t:=target -target:=target h=help -help=help -dry-run=dryRun

if [ ! -z "$help" ]; then
  _backup_usage
  return
fi

source="$source[2]"
target="$target[2]"
mode=incr

if [ -z "$source" ]; then
  _backup_usage
  return
fi
if [ -z "$target" ]; then
  _backup_usage
  return
fi

ulimit -n 1024


GPG_KEY="C82C3D364042C264D958B1AC3819B9AC527E8BB0"

backupCmd="duplicity\
  --verbosity info\
  --encrypt-sign-key="$GPG_KEY"\
  --full-if-older-than 7D\
  --allow-source-mismatch\
  --progress\
  --use-agent\
  --exclude=\"**/.DS_Store\"\
  --log-file \"$HOME/.duplicity/info.log\"\
  $mode $source $target"

exitStatus=0

notify --title "ðŸ—„ Backup" --message "start backup for '$source'. will put it to '$target'"

if [ ! -z "$dryRun" ]; then
  echo ""
  echo $backupCmd
else
  eval $backupCmd &> /dev/null
  exitStatus=$?
fi

if [ $exitStatus -ne 0 ]; then
  notify --title "Backup" --message "ðŸ˜± failed. See ~/.duplicity/info.log for more info."
else
  notify --title "Backup" --message "âœ… finished"
fi


